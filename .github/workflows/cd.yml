name: CD

on:
  workflow_run:
    workflows: ["CI"]
    types: [completed]
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

env:
  TF_WORKING_DIR: terraform
  IMAGE_REFERENCE: ghcr.io/${{ github.repository_owner }}/movie-watchlist-api:latest
  RESOURCE_GROUP: Default                   

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    environment:
      name: prod                            
    permissions:
      contents: read
      issues: write
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Install IBM Cloud CLI & Code Engine plugin
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq curl
          curl -fsSL https://clis.cloud.ibm.com/install/linux | sh
          ibmcloud plugin install code-engine -f

      - name: Terraform init
        working-directory: ${{ env.TF_WORKING_DIR }}
        env:
          IBMCLOUD_API_KEY: ${{ secrets.IBMCLOUD_API_KEY }}
        run: terraform init -input=false

      - name: Import existing Code Engine project & app (idempotent)
        working-directory: ${{ env.TF_WORKING_DIR }}
        env:
            IBMCLOUD_API_KEY: ${{ secrets.IBMCLOUD_API_KEY }}
            REGION: eu-gb
            RESOURCE_GROUP: ${{ env.RESOURCE_GROUP }}
            CE_PROJECT_NAME: movie-watchlist-project
            APP_NAME: movie-watchlist
            # Provide TF vars so Terraform won't prompt during import/provider init
            TF_VAR_resource_group: ${{ env.RESOURCE_GROUP }}
            TF_VAR_image_reference: ${{ env.IMAGE_REFERENCE }}
        run: |
            set -euo pipefail

            # Login + target
            ibmcloud login --apikey "$IBMCLOUD_API_KEY" -r "$REGION"
            ibmcloud target -g "$RESOURCE_GROUP"
            ibmcloud plugin install code-engine -f >/dev/null

            # ----- Import PROJECT (needs UUID, not CRN) -----
            PJSON=$(ibmcloud ce project get --name "$CE_PROJECT_NAME" --output json 2>/dev/null || true)
            if [ -n "${PJSON:-}" ]; then
            PUUID=$(printf '%s' "$PJSON" | jq -r '.project_id // .projectId // empty')
            if [ -z "$PUUID" ]; then
                # fallback: extract first UUID found
                PUUID=$(printf '%s' "$PJSON" | grep -oE '[0-9a-fA-F-]{36}' | head -n1 || true)
            fi
            if [ -n "$PUUID" ]; then
                echo "Using CE project UUID: $PUUID"
                terraform state show ibm_code_engine_project.code_engine_project_instance >/dev/null 2>&1 || \
                terraform import -input=false ibm_code_engine_project.code_engine_project_instance "$PUUID"
            else
                echo "ERROR: Could not extract project UUID from CLI output"; echo "$PJSON"; exit 1
            fi
            else
            echo "No existing project named '$CE_PROJECT_NAME' found. Terraform will create it."
            fi

            # Select project context for CE app commands
            ibmcloud ce project select --name "$CE_PROJECT_NAME" >/dev/null

            # ----- Import APP (try by UUID; fall back to project/name composite) -----
            AJSON=$(ibmcloud ce app get --name "$APP_NAME" --output json 2>/dev/null || true)
            if [ -n "${AJSON:-}" ]; then
            AUUID=$(printf '%s' "$AJSON" | jq -r '.id // .app_id // empty')
            if [ -z "$AUUID" ]; then
                # fallback: extract first UUID found
                AUUID=$(printf '%s' "$AJSON" | grep -oE '[0-9a-fA-F-]{36}' | head -n1 || true)
            fi
            if [ -n "$AUUID" ]; then
                echo "Using CE app UUID: $AUUID"
                terraform state show ibm_code_engine_app.code_engine_app_instance >/dev/null 2>&1 || \
                terraform import -input=false ibm_code_engine_app.code_engine_app_instance "$AUUID" || true
            else
                echo "NOTE: Could not extract app UUID; will try composite import"
                # Some provider versions accept "projectUUID/appName" as import id
                if [ -n "${PUUID:-}" ]; then
                terraform state show ibm_code_engine_app.code_engine_app_instance >/dev/null 2>&1 || \
                    terraform import -input=false ibm_code_engine_app.code_engine_app_instance "${PUUID}/${APP_NAME}" || true
                fi
            fi
            else
            echo "No existing app named '$APP_NAME' found. Terraform will create it."
            fi

            echo "==== Terraform state after imports ===="
            terraform state list || true

            # Hard-fail if project exists but still not in state (prevents re-create)
            if [ -n "${PJSON:-}" ] && ! terraform state show ibm_code_engine_project.code_engine_project_instance >/dev/null 2>&1; then
            echo "ERROR: Project import failed; aborting to avoid 'already exists' during apply."
            exit 1
            fi

            # If app exists but still not in state, we still allow plan/apply to run:
            # Terraform may then detect 'no-op' or we can handle drift later.


      - name: Terraform validate
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform validate

      - name: Terraform plan
        working-directory: ${{ env.TF_WORKING_DIR }}
        env:
          IBMCLOUD_API_KEY: ${{ secrets.IBMCLOUD_API_KEY }}
        run: |
          terraform plan -input=false -no-color \
            -var "resource_group=${{ env.RESOURCE_GROUP }}" \
            -var "image_reference=${{ env.IMAGE_REFERENCE }}" \
            -out tfplan
          terraform show -no-color tfplan > plan.txt

      - name: Terraform apply
        working-directory: ${{ env.TF_WORKING_DIR }}
        env:
          IBMCLOUD_API_KEY: ${{ secrets.IBMCLOUD_API_KEY }}
        run: terraform apply -input=false -auto-approve tfplan

      - name: Show Terraform outputs (App URL)
        id: show
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          echo "## Terraform outputs" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          terraform output
          APP_URL=$(terraform output -raw app_url || true)
          echo "url=$APP_URL" >> "$GITHUB_OUTPUT"
          if [ -n "$APP_URL" ]; then
            echo "- **App URL:** [$APP_URL]($APP_URL)" >> "$GITHUB_STEP_SUMMARY"
            echo "App URL: $APP_URL"
          else
            echo "- **App URL:** (none)" >> "$GITHUB_STEP_SUMMARY"
          fi

      # OWASP ZAP baseline DAST scan
      - name: OWASP ZAP Baseline Scan
        if: steps.show.outputs.url != ''    
        uses: zaproxy/action-baseline@v0.11.0
        with:
          target: ${{ steps.show.outputs.url }}/docs
          cmd_options: '-a'                 
        continue-on-error: true             

      - name: Upload artifacts (plan & ZAP reports)
        uses: actions/upload-artifact@v4
        with:
          name: deploy-artifacts-${{ github.sha }}
          path: |
            terraform/plan.txt
            report_html.html
            report_json.json
            report_md.md