name: CD

on:
  workflow_run:
    workflows: ["CI"]
    types: [completed]
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

env:
  TF_WORKING_DIR: terraform
  IMAGE_REFERENCE: ghcr.io/${{ github.repository_owner }}/movie-watchlist-api:latest
  RESOURCE_GROUP: Default                   

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    environment:
      name: prod                            
    permissions:
      contents: read
      issues: write
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Install IBM Cloud CLI & Code Engine plugin
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq curl
          curl -fsSL https://clis.cloud.ibm.com/install/linux | sh
          ibmcloud plugin install code-engine -f

      - name: Terraform init
        working-directory: ${{ env.TF_WORKING_DIR }}
        env:
          IBMCLOUD_API_KEY: ${{ secrets.IBMCLOUD_API_KEY }}
        run: terraform init -input=false

      - name: Import existing Code Engine project (idempotent)
        working-directory: ${{ env.TF_WORKING_DIR }}
        env:
            IBMCLOUD_API_KEY: ${{ secrets.IBMCLOUD_API_KEY }}
            REGION: eu-gb
            CE_PROJECT_NAME: movie-watchlist-project
            RESOURCE_GROUP: ${{ env.RESOURCE_GROUP }}
            # Provide TF vars so Terraform won't prompt during import/provider init
            TF_VAR_resource_group: ${{ env.RESOURCE_GROUP }}
            TF_VAR_image_reference: ${{ env.IMAGE_REFERENCE }}
        run: |
            set -euo pipefail

            ibmcloud login --apikey "$IBMCLOUD_API_KEY" -r "$REGION"
            ibmcloud target -g "$RESOURCE_GROUP"
            ibmcloud plugin install code-engine -f >/dev/null

            # Get raw JSON once
            JSON=$(ibmcloud ce project get --name "$CE_PROJECT_NAME" --output json 2>/dev/null || true)

            if [ -n "${JSON:-}" ]; then
            echo "Found project JSON."
            # Try multiple fields; some CLIs return CRN in .id and UUID elsewhere.
            RAW_ID=$(printf '%s' "$JSON" | jq -r '.project_id // .projectId // .id // empty')

            # If we got a CRN in RAW_ID, extract the UUID from it; otherwise keep as-is.
            UUID=$(printf '%s' "$RAW_ID" | grep -oE '[0-9a-fA-F-]{36}' || true)

            if [ -z "$UUID" ]; then
                # As a fallback, scan full JSON for a UUID anywhere
                UUID=$(printf '%s' "$JSON" | grep -oE '[0-9a-fA-F-]{36}' | head -n1 || true)
            fi

            if [ -n "$UUID" ]; then
                echo "Using Code Engine project UUID: $UUID"
                # Only import if not already in state
                if ! terraform state show ibm_code_engine_project.code_engine_project_instance >/dev/null 2>&1; then
                terraform import -input=false ibm_code_engine_project.code_engine_project_instance "$UUID"
                fi

                echo "==== Terraform state after import ===="
                terraform state list || true

                if ! terraform state show ibm_code_engine_project.code_engine_project_instance >/dev/null 2>&1; then
                echo "ERROR: Import failed (resource not found in state). Aborting to prevent re-create."
                exit 1
                fi
            else
                echo "ERROR: Could not extract a project UUID. Aborting."
                echo "$JSON"
                exit 1
            fi
            else
            echo "No existing project named '$CE_PROJECT_NAME' found. Terraform will create it."
            fi


      - name: Terraform validate
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform validate

      - name: Terraform plan
        working-directory: ${{ env.TF_WORKING_DIR }}
        env:
          IBMCLOUD_API_KEY: ${{ secrets.IBMCLOUD_API_KEY }}
        run: |
          terraform plan -input=false -no-color \
            -var "resource_group=${{ env.RESOURCE_GROUP }}" \
            -var "image_reference=${{ env.IMAGE_REFERENCE }}" \
            -out tfplan
          terraform show -no-color tfplan > plan.txt

      - name: Terraform apply
        working-directory: ${{ env.TF_WORKING_DIR }}
        env:
          IBMCLOUD_API_KEY: ${{ secrets.IBMCLOUD_API_KEY }}
        run: terraform apply -input=false -auto-approve tfplan

      - name: Show Terraform outputs (App URL)
        id: show
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          echo "## Terraform outputs" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          terraform output
          APP_URL=$(terraform output -raw app_url || true)
          echo "url=$APP_URL" >> "$GITHUB_OUTPUT"
          if [ -n "$APP_URL" ]; then
            echo "- **App URL:** [$APP_URL]($APP_URL)" >> "$GITHUB_STEP_SUMMARY"
            echo "App URL: $APP_URL"
          else
            echo "- **App URL:** (none)" >> "$GITHUB_STEP_SUMMARY"
          fi

      # OWASP ZAP baseline DAST scan
      - name: OWASP ZAP Baseline Scan
        if: steps.show.outputs.url != ''    
        uses: zaproxy/action-baseline@v0.11.0
        with:
          target: ${{ steps.show.outputs.url }}/docs
          cmd_options: '-a'                 
        continue-on-error: true             

      - name: Upload artifacts (plan & ZAP reports)
        uses: actions/upload-artifact@v4
        with:
          name: deploy-artifacts-${{ github.sha }}
          path: |
            terraform/plan.txt
            report_html.html
            report_json.json
            report_md.md